name: master

on:
  push:
    branches:
    - main

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: antoni0832/backend-app
  FRONTEND_IMAGE_NAME: antoni0832/frontend-app

jobs:
  lint-backend:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout backend repository
      uses: actions/checkout@v4

    - name: Configure python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: "pip"
        cache-dependency-path: backend/requirements.txt

    - name: Install Python linters
      run: pip install flake8 isort black

    - name: Run flake8
      run: flake8 --config=backend/.flake8 backend/ || true

    - name: Run black
      run: black backend/ --check --diff || true

    - name: Run isort
      run: isort backend/ --check-only --diff || true

  lint-frontend:
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout frontend repository
      uses: actions/checkout@v4

    - name: Setup nodejs
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install test utils
      run: cd frontend/ && npm install eslint --save-dev && npm install

    - name: Run linting
      run: cd frontend/ && npm run lint || true

  test-backend:
    runs-on: ubuntu-24.04
    needs: [ lint-backend ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: "pip"
        cache-dependency-path: backend/requirements.txt

    - name: Configure test dependencies
      run: pip install pytest

    - name: Run tests
      run: cd backend/ && python -m pytest tests/ -v

  build-backend:
    runs-on: ubuntu-24.04
    needs: [ test-backend ]
    services:
      mysql:
        image: mysql:8.4.6
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: user
          MYSQL_ROOT_PASSWORD: root
          MYSQL_HOST: mysql_db
          MYSQL_DB: app_db
          MYSQL_PORT: 3306
        options: >-
          --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
        - 3306:3306

      redis:
        image: redis:8.2.2-alpine
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
        options: >-
          --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
        - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up docker hub account
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: backend/
        file: backend/Dockerfile
        push: true
        tags: ${{ env.BACKEND_IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-24.04
    needs: [ lint-frontend ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up docker hub account
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: frontend/
        file: frontend/Dockerfile
        push: true
        tags: ${{ env.FRONTEND_IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
