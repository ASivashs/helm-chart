name: deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
    #   - ".github/workflows/**"
    #   - "backend/.dockerignore"
    #   - ".gitignore"
    #   - "backend/.flake8"
    #   - "backend/pyproject.toml"
    #   - "frontend/eslint.config.js"
    #   - "helm-chart/.helmignore"
    #   - "helm-chart/Chart.yaml"

env:
  BACKEND_IMAGE_NAME: antoni0832/backend-app
  FRONTEND_IMAGE_NAME: antoni0832/frontend-app
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend
  HELM_DIR: helm-chart
  RELEASE_DEST_DIR: release

jobs:
  build-backend:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker hub account
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Backend tag
        id: backend-tag
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq '.backend.image.tag' ${{ env.HELM_DIR }}/values.yaml

      - name: Check image on Docker hub
        id: backend-image-exist
        run: |
          if docker manifest inspect ${{ env.BACKEND_IMAGE_NAME }}:${{ steps.backend-tag.outputs.result }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        if: ${{ steps.backend-image-exist.outputs.exists == 'false' }}
        with:
          context: ${{ env.BACKEND_DIR }}
          file: ${{ env.BACKEND_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:${{ steps.backend-tag.outputs.result }}
            ${{ env.BACKEND_IMAGE_NAME }}:sha-${{ github.sha }}  
            ${{ env.BACKEND_IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.run_id=${{ github.run_id }}

  build-frontend:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker hub account
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Frontend tag
        id: frontend-tag
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq '.frontend.image.tag' ${{ env.HELM_DIR }}/values.yaml

      - name: Check image on Docker hub
        id: frontend-image-exist
        run: |
          if docker manifest inspect ${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.frontend-tag.outputs.result }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        if: ${{ steps.frontend-image-exist.outputs.exists == 'false' }}
        with:
          context: ${{ env.FRONTEND_DIR }}
          file: ${{ env.FRONTEND_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.frontend-tag.outputs.result }}
            ${{ env.FRONTEND_IMAGE_NAME }}:sha-${{ github.sha }}
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.run_id=${{ github.run_id }}

  lint-helm:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Lint Helm chart
        run: |
          helm lint ${{ env.HELM_DIR }}

  release:
    runs-on: self-hosted
    needs:
      - build-backend
      - build-frontend
      - lint-helm
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config --global user.email "username@noreply.github.com"
          git config --global user.name "username"

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Package helm
        run: helm package ${{ env.HELM_DIR }} --destination ${{ env.RELEASE_DEST_DIR }}

      # - name: Release
      #   uses: helm/chart-releaser-action@v1.7.0
      #   with:
      #     charts_dir: .
      #     config: .cr.yaml
      #   env:
      #     CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get chart version
        id: chart_version
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq '.version' ${{ env.HELM_DIR }}/Chart.yaml

      - name: Upload packaged charts as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Chart-${{ steps.chart_version.outputs.result }}
          path: ${{ env.RELEASE_DEST_DIR }}

  deploy:
    runs-on: self-hosted
    needs:
      - release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get chart version
        id: chart_version
        uses: mikefarah/yq@v4.40.5
        with:
          cmd: yq '.version' ${{ env.HELM_DIR }}/Chart.yaml

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Chart-${{ steps.chart_version.outputs.result }}
          path: .chart

      - name: Set up KUBECONFIG
        run: echo "${{ secrets.KUBECONFIG }}" > /tmp/config

      - name: Check config
        run: |
          kubectl --kubeconfig=/tmp/config config view --insecure-skip-tls-verify
          kubectl --kubeconfig=/tmp/config cluster-info --insecure-skip-tls-verify || true

      - name: Deploy Helm chart
        env:
          KUBECONFIG: /tmp/config
        run: |
          helm --kubeconfig=/tmp/config upgrade --install release .chart/Chart-${{ steps.chart_version.outputs.result }}.tgz \
          --namespace test-runners --insecure-skip-tls-verify
